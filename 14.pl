
min(X,Y,X):-
	X<Y,!. %если первое число меньше второго, то первое число - минимум 
min(_,Y,Y).  % в противном случае минимум будет второе число 
%------------------------------------------------------
%предикат, находящий минимальный элемент списка.
min_list([X],X). % единственный элемент одноэлементного списка является минимальным элементом списка
min_list([H|T],M):-
   min_list(T,M1), % M1 — минимальный элемент хвоста 
   min(H,M1,M). % M — минимум из M1 и первого элемента исходного списка 
%---------------------------------------------------------
delete_one(_,[],[]).
delete_one(X,[X|L],L):-!. %нужный элемент найден, удалем его
delete_one(X,[Y|L],[Y|L1]):-
    delete_one(X,L,L1). %пока первый элемент не окажется удаляемым, переходим к рассмотрению хвоста
%----------------------------------------------------------
choice([ ],[ ]). % отсортированный пустой список остается пустым списком
choice(L,[X|T]):-% приписываем X (минимальный элемент списка L) к отсортированному списку T
    min_list(L,X), % X — минимальный элемент из списка L 
    delete_one(X,L,L1),% L1 — результат удаления первого вхождения элемента X из списка L 
    choice(L1,T). % сортируем список L1, результат обозначаем T 